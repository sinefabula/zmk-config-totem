//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define LEFT 1
#define RIGHT 2
#define NUM 3
#define FUNC 4

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <170>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34>;
            hold-trigger-on-release;
        };
    };

     combos {
            compatible = "zmk,combos";

            combo_esc {
                timeout-ms = <30>;
                key-positions = <16 17>;
                bindings = <&kp ESC>;
            };

            combo_copy {
                timeout-ms = <30>;
                key-positions = <22 23>;
                bindings = <&kp LG(C)>;
            };
            
            combo_paste {
                timeout-ms = <30>;
                key-positions = <22 24>;
                bindings = <&kp LG(V)>;
            };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
label= "BASE";
bindings = <
            &kp Q       &kp W       &kp E       &kp R       &kp T           &kp Y       &kp I       &kp U       &kp O       &kp P
            &hml LSHFT A &hml LCTRL S &hml LALT D  &hml LGUI F  &kp G       &kp H       &hmr RGUI J  &hmr RALT K  &hmr RCTRL L &hmr RSHFT SEMI
&kp ESC     &kp Z       &kp X       &kp C       &kp V       &kp B           &kp K       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp APOS
                                    &mo LEFT    &lt NUM BSPC &kp TAB        &kp RET     &kp SPACE   &mo RIGHT
            >;
        };

        left_layer {
label= "LEFT";
bindings = <
            &trans      &kp PG_UP   &kp UP      &kp PG_DN   &trans          &kp AMPS    &kp STAR    &kp LPAR    &kp RPAR    &kp BSLH
            &kp LSHFT &hml LCTRL LEFT &hml LALT DOWN &hml LGUI RIGHT &trans    &kp EQUAL   &kp MINUS   &kp LBKT    &kp RBKT    &kp APOS
&trans      &trans      &kp HOME    &none       &kp END     &trans          &kp PLUS    &kp UNDER   &kp LBRC    &kp RBRC    &kp PIPE &trans      
                                    &trans      &kp BSPC    &trans          &trans      &trans      &mo FUNC      
            >;
        };

        right_layer {
label= "RGHT";
bindings = <
            &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT       &trans      &trans      &trans      &trans      &trans
            &kp TILDE   &trans      &trans      &trans      &kp CARET       &trans      &kp RGUI    &kp RALT    &kp RCTRL   &kp RSHFT
&trans      &kp GRAVE   &trans      &trans      &trans      &trans          &trans      &trans      &trans      &trans      &trans &trans      
                                    &mo FUNC    &kp DEL     &trans          &trans      &trans      &trans      
            >;
        };

        num_layer {
label= "NUMR";
bindings = <
            &trans      &trans      &trans      &trans      &trans          &trans      &kp N7      &kp N8      &kp N9      &trans
            &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI    &trans          &trans      &kp N4      &kp N5      &kp N6      &trans
&trans      &trans      &trans      &trans      &trans      &trans          &trans      &kp N1      &kp N2      &kp N3      &trans &trans
                                    &trans      &kp BSPC    &trans          &trans      &trans      &kp N0
            >;
        };


        func_layer {
label= "FUNC";
bindings = <
            &sys_reset  &bt BT_CLR &out OUT_TOG &trans      &trans          &trans      &kp F7      &kp F8      &kp F9      &kp F12
            &bootloader &bt BT_NXT  &trans      &trans      &trans          &trans      &kp F4      &kp F5      &kp F6      &kp F11  
&trans      &trans      &bt BT_PRV  &trans      &trans      &trans          &trans      &kp F1      &kp F2      &kp F3      &kp F10     &trans         
                                    &trans      &trans      &trans          &trans      &trans      &trans      
            >;
        };


    }; // keymap
};
